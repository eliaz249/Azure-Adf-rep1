{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "el109"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline10')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureDataLakeStoreWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText15",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText16",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-22T03:01:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline13')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable22",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CosmosDbSqlApiCollection4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-26T16:28:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-16T10:19:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.Childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'txt')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-16T20:04:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Row ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Row ID",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Order Date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ship Date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ship Mode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship Mode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Customer ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Customer Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Segment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Segment",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Postal Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Postal Code",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Product ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Sub-Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sub-Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Product Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Sales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Discount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Profit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Profit",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-16T23:56:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CompanyName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CompanyName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ContactName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ContactName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ContactTitle",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ContactTitle",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Address",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Address",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Fax",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Fax",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable11",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable12",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-21T01:35:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasqlP",
								"type": "DatasetReference",
								"parameters": {
									"TableNameP": {
										"value": "@pipeline().parameters.TABNAME",
										"type": "Expression"
									},
									"DBNAME": {
										"value": "@pipeline().parameters.DBANE",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText33",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"DBANE": {
						"type": "string"
					},
					"TABNAME": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Excel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Row ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Row ID",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Order Date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ship Date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Ship Mode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ship Mode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Customer ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Customer Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Segment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Segment",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Postal Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Postal Code",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Product ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Sub-Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sub-Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Product Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Sales",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Sales",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Discount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Discount",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Profit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Profit",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-17T12:26:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_FiletoTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Empid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Empid",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Empname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Empname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastModifiedDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastModifiedDate",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText13",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable10",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Folder_Training"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-19T19:36:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Getmdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText4",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.Childitems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText5",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText6",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fnames",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fnames_copy",
										"value": {
											"value": "@variables('fnames')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"fnames": {
						"type": "Array"
					},
					"fnames_copy": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:42:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Getmdata1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata_Allfiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText9",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FilterForTxtfiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata_Allfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata_Allfiles').output.Childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'txt')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach_loading",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterForTxtfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterForTxtfiles').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText10",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText11",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEach_Deleting",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach_loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterForTxtfiles').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-17T00:41:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_GitHub2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText31",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText32",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_deleteActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText12",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.Childitems\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText12",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-17T12:26:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggr_Tr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable14",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable15",
								"type": "DatasetReference"
							},
							"name": "SlaesFact"
						}
					],
					"transformations": [
						{
							"name": "YearMonth"
						},
						{
							"name": "AggrgateProfitLoss"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as byte,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as byte,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 derive(Year = year(OrderDate),\n\t\tMonth = month(OrderDate)) ~> YearMonth\nYearMonth aggregate(groupBy(CustomerID,\n\t\tYear,\n\t\tMonth),\n\tTotalSales = sum(SubTotal),\n\t\tTotalTax = sum(TaxAmt),\n\t\tTotalDue = sum(TotalDue),\n\t\tTotalFreight = sum(Freight)) ~> AggrgateProfitLoss\nAggrgateProfitLoss sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCustomerID,\n\t\tYear,\n\t\tMonth,\n\t\tTotalSales,\n\t\tTotalTax,\n\t\tTotalDue,\n\t\tTotalFreight\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SlaesFact"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_TYP2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText27",
								"type": "DatasetReference"
							},
							"name": "EmpDataCsv"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable30",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable31",
								"type": "DatasetReference"
							},
							"name": "Maxkey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable32",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tEmpid as string,\n\t\tEmpname as string,\n\t\tDepartment as string,\n\t\tCity as string,\n\t\tLastModifiedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpDataCsv\nsource(output(\n\t\tSID as integer,\n\t\tEmpid as string,\n\t\tEmpname as string,\n\t\tDepartment as string,\n\t\tCity as string,\n\t\tLastModifiedDate as string,\n\t\tIndicator as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource(output(\n\t\tmax_key as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max([SID]) as max_key from [dbo].[EmpDimT2]',\n\tformat: 'query') ~> Maxkey\nsource1 select(mapColumn(\n\t\tDimSID = SID,\n\t\tDimEmpid = Empid,\n\t\tDimEmpname = Empname,\n\t\tDimDepartment = Department,\n\t\tDimCity = City,\n\t\tDimLastModifiedDate = LastModifiedDate,\n\t\tDimIndicator = Indicator\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nEmpDataCsv, Maxkey join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nJoin1, Select1 lookup(Empid == DimEmpid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(DimEmpid),\n\tdisjoint: false) ~> ConditionalSplit1@(Insert, Exists)\nConditionalSplit1@Insert derive(Indicator = 1) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tSID as integer,\n\t\tEmpid as string,\n\t\tEmpname as string,\n\t\tDepartment as string,\n\t\tCity as string,\n\t\tLastModifiedDate as string,\n\t\tIndicator as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEmpid,\n\t\tEmpname,\n\t\tDepartment,\n\t\tCity,\n\t\tLastModifiedDate,\n\t\tIndicator\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_TYPE1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable28",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable29",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tEmpid as string,\n\t\tEmpname as string,\n\t\tDepartment as string,\n\t\tCity as string,\n\t\tLastModifiedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 alterRow(upsertIf(1==1)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tEmpid as string,\n\t\tEmpname as string,\n\t\tDepartment as string,\n\t\tCity as string,\n\t\tLastModifiedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Empid'],\n\tformat: 'table',\n\tmapColumn(\n\t\tEmpid,\n\t\tEmpname,\n\t\tDepartment,\n\t\tCity,\n\t\tLastModifiedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLQuerytoTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tCustomerID as string,\n\t\tCompanyName as string,\n\t\tContactName as string,\n\t\tContactTitle as string,\n\t\tAddress as string,\n\t\tCity as string,\n\t\tOrderID as integer,\n\t\tOrderDate as timestamp,\n\t\tFreight as decimal(19,4),\n\t\tShipAddress as string,\n\t\tShipCity as string,\n\t\tShipCountry as string,\n\t\tShipPostalCode as string,\n\t\tShipRegion as string,\n\t\tProductID as integer,\n\t\tQuantity as short,\n\t\tUnitPrice as decimal(19,4)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT        Customers.CustomerID, Customers.CompanyName, Customers.ContactName, Customers.ContactTitle, Customers.Address, Customers.City, Orders.OrderID, Orders.OrderDate, Orders.Freight, Orders.ShipAddress,\u000b                         Orders.ShipCity, Orders.ShipCountry, Orders.ShipPostalCode, Orders.ShipRegion, [Order Details].ProductID, [Order Details].Quantity, [Order Details].UnitPrice\u000bFROM            Customers INNER JOIN\u000b                         Orders ON Customers.CustomerID = Orders.CustomerID INNER JOIN\u000b                         [Order Details] ON Orders.OrderID = [Order Details].OrderID\\n',\n\tformat: 'query') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tCustomerID,\n\t\tCompanyName,\n\t\tContactName,\n\t\tContactTitle,\n\t\tAddress,\n\t\tCity,\n\t\tOrderID,\n\t\tOrderDate,\n\t\tFreight,\n\t\tShipAddress,\n\t\tShipCity,\n\t\tShipCountry,\n\t\tShipPostalCode,\n\t\tShipRegion,\n\t\tProductID,\n\t\tQuantity,\n\t\tUnitPrice\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesFactTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesOrdHdr",
								"type": "DatasetReference"
							},
							"name": "SaleOrdHdr"
						},
						{
							"dataset": {
								"referenceName": "SaleOrdItem",
								"type": "DatasetReference"
							},
							"name": "SaleOrdItem"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable16",
								"type": "DatasetReference"
							},
							"name": "Product"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable17",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SaleHdrItemJoin"
						},
						{
							"name": "HdrItemselection"
						},
						{
							"name": "ProductSaleDetailsJoin"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as byte,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as byte,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SaleOrdHdr\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as short,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tUnitPriceDiscount as decimal(19,4),\n\t\tLineTotal as decimal(38,6),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SaleOrdItem\nsource(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(19,4),\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tWeight as decimal(8,2),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as timestamp,\n\t\tSellEndDate as timestamp,\n\t\tDiscontinuedDate as timestamp,\n\t\tThumbNailPhoto as binary,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Product\nSaleOrdHdr, SaleOrdItem join(SaleOrdHdr@SalesOrderID == SaleOrdItem@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> SaleHdrItemJoin\nSaleHdrItemJoin select(mapColumn(\n\t\tSalesOrderNo = SaleOrdHdr@SalesOrderID,\n\t\tOrderDate,\n\t\tOrderFlag = OnlineOrderFlag,\n\t\tCustomerID,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tOrderQty,\n\t\tProductID,\n\t\tUnitPrice,\n\t\tUnitPriceDiscount,\n\t\tLineTotal\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HdrItemselection\nHdrItemselection, Product join(HdrItemselection@ProductID == Product@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> ProductSaleDetailsJoin\nProductSaleDetailsJoin select(mapColumn(\n\t\tSalesOrderNo,\n\t\tOrderDate,\n\t\tOrderFlag,\n\t\tCustomerID,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tOrderQty,\n\t\tProductID = HdrItemselection@ProductID,\n\t\tUnitPrice,\n\t\tUnitPriceDiscount,\n\t\tLineTotal,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tProductCategoryID,\n\t\tProductModelID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesOrderNo,\n\t\tOrderDate,\n\t\tOrderFlag,\n\t\tCustomerID,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tOrderQty,\n\t\tProductID,\n\t\tUnitPrice,\n\t\tUnitPriceDiscount,\n\t\tLineTotal,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tProductCategoryID,\n\t\tProductModelID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText18",
								"type": "DatasetReference"
							},
							"name": "ActualFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText20",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tsno as integer,\n\t\t{financial year} as integer,\n\t\tquarter as string,\n\t\tamount as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpreferredIntegralType: 'integer') ~> ActualFile\nActualFile sink(input(\n\t\tsno as string,\n\t\t{financial year} as string,\n\t\tquarter as string,\n\t\tamount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['ActualData.csv'],\n\tmapColumn(\n\t\t{financial year},\n\t\tquarter,\n\t\tamount\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDataFlow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "Cust",
							"script": "",
							"dataset": {
								"referenceName": "Cust",
								"type": "DatasetReference"
							}
						},
						{
							"name": "saleordHdr",
							"script": "",
							"dataset": {
								"referenceName": "saleordHdr",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "Target_file",
								"type": "DatasetReference"
							},
							"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SlaesFact.txt'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared Cust = let\r\n  AdfDoc = Sql.Database(\"el109.database.windows.net\", \"el109\"),\r\n  InputTable = AdfDoc{[Schema = \"SalesLT\", Item = \"Customer\"]}[Data]\r\nin\r\n  InputTable;\r\nshared saleordHdr = let\r\n  AdfDoc = Sql.Database(\"el109.database.windows.net\", \"el109\"),\r\n  InputTable = AdfDoc{[Schema = \"SalesLT\", Item = \"SalesOrderHeader\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = Cust,\r\n  #\"Merged queries\" = Table.NestedJoin(Source, {\"CustomerID\"}, saleordHdr, {\"CustomerID\"}, \"saleordHdr\", JoinKind.Inner),\r\n  #\"Expanded SalesLT.CustomerAddress\" = Table.ExpandTableColumn(#\"Merged queries\", \"SalesLT.CustomerAddress\", {\"CustomerID\", \"AddressID\", \"AddressType\", \"rowguid\", \"ModifiedDate\", \"SalesLT.Address\", \"SalesLT.Customer\"}, {\"SalesLT.CustomerAddress.CustomerID\", \"SalesLT.CustomerAddress.AddressID\", \"SalesLT.CustomerAddress.AddressType\", \"SalesLT.CustomerAddress.rowguid\", \"SalesLT.CustomerAddress.ModifiedDate\", \"SalesLT.CustomerAddress.SalesLT.Address\", \"SalesLT.CustomerAddress.SalesLT.Customer\"}),\r\n  #\"Expanded SalesLT.CustomerAddress.SalesLT.Customer\" = Table.ExpandRecordColumn(#\"Expanded SalesLT.CustomerAddress\", \"SalesLT.CustomerAddress.SalesLT.Customer\", {\"CustomerID\", \"NameStyle\", \"Title\", \"FirstName\", \"MiddleName\", \"LastName\", \"Suffix\", \"CompanyName\", \"SalesPerson\", \"EmailAddress\", \"Phone\", \"PasswordHash\", \"PasswordSalt\", \"rowguid\", \"ModifiedDate\", \"SalesLT.CustomerAddress\", \"SalesLT.SalesOrderHeader\"}, {\"SalesLT.CustomerAddress.SalesLT.Customer.CustomerID\", \"SalesLT.CustomerAddress.SalesLT.Customer.NameStyle\", \"SalesLT.CustomerAddress.SalesLT.Customer.Title\", \"SalesLT.CustomerAddress.SalesLT.Customer.FirstName\", \"SalesLT.CustomerAddress.SalesLT.Customer.MiddleName\", \"SalesLT.CustomerAddress.SalesLT.Customer.LastName\", \"SalesLT.CustomerAddress.SalesLT.Customer.Suffix\", \"SalesLT.CustomerAddress.SalesLT.Customer.CompanyName\", \"SalesLT.CustomerAddress.SalesLT.Customer.SalesPerson\", \"SalesLT.CustomerAddress.SalesLT.Customer.EmailAddress\", \"SalesLT.CustomerAddress.SalesLT.Customer.Phone\", \"SalesLT.CustomerAddress.SalesLT.Customer.PasswordHash\", \"SalesLT.CustomerAddress.SalesLT.Customer.PasswordSalt\", \"SalesLT.CustomerAddress.SalesLT.Customer.rowguid\", \"SalesLT.CustomerAddress.SalesLT.Customer.ModifiedDate\", \"SalesLT.CustomerAddress.SalesLT.Customer.SalesLT.CustomerAddress\", \"SalesLT.CustomerAddress.SalesLT.Customer.SalesLT.SalesOrderHeader\"}),\r\n  #\"Expanded saleordHdr\" = Table.ExpandTableColumn(#\"Expanded SalesLT.CustomerAddress.SalesLT.Customer\", \"saleordHdr\", {\"SalesOrderID\", \"RevisionNumber\", \"OrderDate\", \"DueDate\", \"ShipDate\", \"Status\", \"OnlineOrderFlag\", \"SalesOrderNumber\", \"PurchaseOrderNumber\", \"AccountNumber\", \"CustomerID\", \"ShipToAddressID\", \"BillToAddressID\", \"ShipMethod\", \"CreditCardApprovalCode\", \"SubTotal\", \"TaxAmt\", \"Freight\", \"TotalDue\", \"Comment\", \"rowguid\", \"ModifiedDate\", \"SalesLT.Address(BillToAddressID)\", \"SalesLT.Address(ShipToAddressID)\", \"SalesLT.Customer\", \"SalesLT.SalesOrderDetail\"}, {\"saleordHdr.SalesOrderID\", \"saleordHdr.RevisionNumber\", \"saleordHdr.OrderDate\", \"saleordHdr.DueDate\", \"saleordHdr.ShipDate\", \"saleordHdr.Status\", \"saleordHdr.OnlineOrderFlag\", \"saleordHdr.SalesOrderNumber\", \"saleordHdr.PurchaseOrderNumber\", \"saleordHdr.AccountNumber\", \"saleordHdr.CustomerID\", \"saleordHdr.ShipToAddressID\", \"saleordHdr.BillToAddressID\", \"saleordHdr.ShipMethod\", \"saleordHdr.CreditCardApprovalCode\", \"saleordHdr.SubTotal\", \"saleordHdr.TaxAmt\", \"saleordHdr.Freight\", \"saleordHdr.TotalDue\", \"saleordHdr.Comment\", \"saleordHdr.rowguid\", \"saleordHdr.ModifiedDate\", \"saleordHdr.SalesLT.Address(BillToAddressID)\", \"saleordHdr.SalesLT.Address(ShipToAddressID)\", \"saleordHdr.SalesLT.Customer\", \"saleordHdr.SalesLT.SalesOrderDetail\"}),\r\n  #\"Expanded saleordHdr.SalesLT.SalesOrderDetail\" = Table.ExpandTableColumn(#\"Expanded saleordHdr\", \"saleordHdr.SalesLT.SalesOrderDetail\", {\"SalesOrderID\", \"SalesOrderDetailID\", \"OrderQty\", \"ProductID\", \"UnitPrice\", \"UnitPriceDiscount\", \"LineTotal\", \"rowguid\", \"ModifiedDate\", \"SalesLT.Product\", \"SalesLT.SalesOrderHeader\"}, {\"saleordHdr.SalesLT.SalesOrderDetail.SalesOrderID\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesOrderDetailID\", \"saleordHdr.SalesLT.SalesOrderDetail.OrderQty\", \"saleordHdr.SalesLT.SalesOrderDetail.ProductID\", \"saleordHdr.SalesLT.SalesOrderDetail.UnitPrice\", \"saleordHdr.SalesLT.SalesOrderDetail.UnitPriceDiscount\", \"saleordHdr.SalesLT.SalesOrderDetail.LineTotal\", \"saleordHdr.SalesLT.SalesOrderDetail.rowguid\", \"saleordHdr.SalesLT.SalesOrderDetail.ModifiedDate\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.Product\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader\"}),\r\n  #\"Expanded saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader\" = Table.ExpandRecordColumn(#\"Expanded saleordHdr.SalesLT.SalesOrderDetail\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader\", {\"SalesOrderID\", \"RevisionNumber\", \"OrderDate\", \"DueDate\", \"ShipDate\", \"Status\", \"OnlineOrderFlag\", \"SalesOrderNumber\", \"PurchaseOrderNumber\", \"AccountNumber\", \"CustomerID\", \"ShipToAddressID\", \"BillToAddressID\", \"ShipMethod\", \"CreditCardApprovalCode\", \"SubTotal\", \"TaxAmt\", \"Freight\", \"TotalDue\", \"Comment\", \"rowguid\", \"ModifiedDate\", \"SalesLT.Address(BillToAddressID)\", \"SalesLT.Address(ShipToAddressID)\", \"SalesLT.Customer\", \"SalesLT.SalesOrderDetail\"}, {\"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesOrderID\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.RevisionNumber\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.OrderDate\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.DueDate\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.ShipDate\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.Status\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.OnlineOrderFlag\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesOrderNumber\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.PurchaseOrderNumber\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.AccountNumber\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.CustomerID\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.ShipToAddressID\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.BillToAddressID\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.ShipMethod\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.CreditCardApprovalC\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SubTotal\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.TaxAmt\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.Freight\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.TotalDue\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.Comment\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.rowguid\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.ModifiedDate\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Address(Bil\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Address(Shi\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.SalesOrderD\"}),\r\n  #\"Expanded saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer\" = Table.ExpandRecordColumn(#\"Expanded saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer\", {\"CustomerID\", \"NameStyle\", \"Title\", \"FirstName\", \"MiddleName\", \"LastName\", \"Suffix\", \"CompanyName\", \"SalesPerson\", \"EmailAddress\", \"Phone\", \"PasswordHash\", \"PasswordSalt\", \"rowguid\", \"ModifiedDate\", \"SalesLT.CustomerAddress\", \"SalesLT.SalesOrderHeader\"}, {\"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Cu\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Na\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Ti\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Fi\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Mi\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.La\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Su\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Co\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Sa\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Em\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Ph\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Pa\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer..1\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.ro\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer.Mo\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer..2\", \"saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer..3\"}),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Expanded saleordHdr.SalesLT.SalesOrderDetail.SalesLT.SalesOrderHeader.SalesLT.Customer\", {\"Suffix\", \"saleordHdr.SalesLT.Address(BillToAddressID)\"})\r\nin\r\n  #\"Removed columns\";\r\n"
				}
			},
			"dependsOn": []
		}
	]
}